
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e8  080041e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041f0  080041f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080041f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004080  20000074  0800426c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040f4  0800426c  000240f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd6b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258a  00000000  00000000  0002fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000323a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00032f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a7f  00000000  00000000  00033a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d85a  00000000  00000000  0004a4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cdac  00000000  00000000  00057d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000e4b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040e8 	.word	0x080040e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080040e8 	.word	0x080040e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000090 	.word	0x20000090
 8000514:	20000144 	.word	0x20000144

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b090      	sub	sp, #64	; 0x40
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fa3b 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f841 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8c9 	bl	80006bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800052a:	f000 f89d 	bl	8000668 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800052e:	2300      	movs	r3, #0
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
 8000532:	2300      	movs	r3, #0
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fdbb 	bl	80020b6 <osMutexCreate>
 8000540:	4603      	mov	r3, r0
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <main+0x7c>)
 8000544:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <main+0x80>)
 8000548:	f107 041c 	add.w	r4, r7, #28
 800054c:	461d      	mov	r5, r3
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fd48 	bl	8001ff6 <osThreadCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <main+0x84>)
 800056a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <main+0x88>)
 800056e:	463c      	mov	r4, r7
 8000570:	461d      	mov	r5, r3
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800057e:	463b      	mov	r3, r7
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fd37 	bl	8001ff6 <osThreadCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <main+0x8c>)
 800058c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058e:	f001 fd2b 	bl	8001fe8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000592:	e7fe      	b.n	8000592 <main+0x7a>
 8000594:	20000390 	.word	0x20000390
 8000598:	08004118 	.word	0x08004118
 800059c:	20000388 	.word	0x20000388
 80005a0:	08004134 	.word	0x08004134
 80005a4:	2000038c 	.word	0x2000038c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fccc 	bl	8003f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <SystemClock_Config+0xb8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <SystemClock_Config+0xb8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <SystemClock_Config+0xb8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <SystemClock_Config+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <SystemClock_Config+0xbc>)
 80005f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <SystemClock_Config+0xbc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fcb1 	bl	8000f84 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000628:	f000 f8dc 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f000 ff14 	bl	8001474 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000652:	f000 f8c7 	bl	80007e4 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART1_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART1_UART_Init+0x4c>)
 80006a0:	f001 f8c8 	bl	8001834 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f89b 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000344 	.word	0x20000344
 80006b8:	40011000 	.word	0x40011000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0x80>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_GPIO_Init+0x80>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_GPIO_Init+0x80>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_GPIO_Init+0x80>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <MX_GPIO_Init+0x80>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0x80>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0x84>)
 8000712:	f000 fc1d 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x84>)
 8000730:	f000 fa8a 	bl	8000c48 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020800 	.word	0x40020800

08000744 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t data[] = "Hello World I am Rahul\n";
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <StartDefaultTask+0x40>)
 800074e:	f107 040c 	add.w	r4, r7, #12
 8000752:	461d      	mov	r5, r3
 8000754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800075c:	e884 0003 	stmia.w	r4, {r0, r1}
  int16_t n = 23;
 8000760:	2317      	movs	r3, #23
 8000762:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t i = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	84bb      	strh	r3, [r7, #36]	; 0x24
  for(;;)
  {

	  HAL_UART_Transmit(&huart1, &data, sizeof(data), HAL_MAX_DELAY);
 8000768:	f107 010c 	add.w	r1, r7, #12
 800076c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000770:	2218      	movs	r2, #24
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <StartDefaultTask+0x44>)
 8000774:	f001 f8ab 	bl	80018ce <HAL_UART_Transmit>
    osDelay(1000);
 8000778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077c:	f001 fc87 	bl	800208e <osDelay>
	  HAL_UART_Transmit(&huart1, &data, sizeof(data), HAL_MAX_DELAY);
 8000780:	e7f2      	b.n	8000768 <StartDefaultTask+0x24>
 8000782:	bf00      	nop
 8000784:	08004150 	.word	0x08004150
 8000788:	20000344 	.word	0x20000344

0800078c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <StartTask02+0x54>)
 800079c:	f000 fbd8 	bl	8000f50 <HAL_GPIO_WritePin>
    osDelay(100);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f001 fc74 	bl	800208e <osDelay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <StartTask02+0x54>)
 80007ae:	f000 fbcf 	bl	8000f50 <HAL_GPIO_WritePin>
    osDelay(100);
 80007b2:	2064      	movs	r0, #100	; 0x64
 80007b4:	f001 fc6b 	bl	800208e <osDelay>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <StartTask02+0x54>)
 80007c0:	f000 fbc6 	bl	8000f50 <HAL_GPIO_WritePin>
    osDelay(100);
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f001 fc62 	bl	800208e <osDelay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <StartTask02+0x54>)
 80007d2:	f000 fbbd 	bl	8000f50 <HAL_GPIO_WritePin>
    osDelay(500);
 80007d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007da:	f001 fc58 	bl	800208e <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007de:	e7d9      	b.n	8000794 <StartTask02+0x8>
 80007e0:	40020800 	.word	0x40020800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_MspInit+0x54>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_MspInit+0x54>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x54>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_MspInit+0x54>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_MspInit+0x54>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_MspInit+0x54>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	f06f 0001 	mvn.w	r0, #1
 8000836:	f000 f9de 	bl	8000bf6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_UART_MspInit+0x84>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d12c      	bne.n	80008c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_UART_MspInit+0x88>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b4:	2307      	movs	r3, #7
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_UART_MspInit+0x8c>)
 80008c0:	f000 f9c2 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40011000 	.word	0x40011000
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f898 	bl	8000a3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800090c:	f002 fde8 	bl	80034e0 <xTaskGetSchedulerState>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d001      	beq.n	800091a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000916:	f003 f8af 	bl	8003a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800094a:	490e      	ldr	r1, [pc, #56]	; (8000984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000960:	4c0b      	ldr	r4, [pc, #44]	; (8000990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800096e:	f7ff ffd7 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f003 fabb 	bl	8003eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdcf 	bl	8000518 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000988:	080041f8 	.word	0x080041f8
  ldr r2, =_sbss
 800098c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000990:	200040f4 	.word	0x200040f4

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <HAL_Init+0x40>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_Init+0x40>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_Init+0x40>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f90d 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f808 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff ff10 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x54>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f917 	bl	8000c2e <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 f8ed 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <HAL_InitTick+0x5c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000394 	.word	0x20000394

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000394 	.word	0x20000394

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff47 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff5c 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffb0 	bl	8000b9c <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e159      	b.n	8000f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8148 	bne.w	8000f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d005      	beq.n	8000c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d130      	bne.n	8000cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	f003 0201 	and.w	r2, r3, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d017      	beq.n	8000d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d123      	bne.n	8000d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	08da      	lsrs	r2, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	69b9      	ldr	r1, [r7, #24]
 8000d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0203 	and.w	r2, r3, #3
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80a2 	beq.w	8000f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a56      	ldr	r2, [pc, #344]	; (8000f30 <HAL_GPIO_Init+0x2e8>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <HAL_GPIO_Init+0x2e8>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dea:	4a52      	ldr	r2, [pc, #328]	; (8000f34 <HAL_GPIO_Init+0x2ec>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a49      	ldr	r2, [pc, #292]	; (8000f38 <HAL_GPIO_Init+0x2f0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d019      	beq.n	8000e4a <HAL_GPIO_Init+0x202>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_GPIO_Init+0x2f4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x1fe>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a47      	ldr	r2, [pc, #284]	; (8000f40 <HAL_GPIO_Init+0x2f8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x1fa>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a46      	ldr	r2, [pc, #280]	; (8000f44 <HAL_GPIO_Init+0x2fc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x1f6>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a45      	ldr	r2, [pc, #276]	; (8000f48 <HAL_GPIO_Init+0x300>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x1f2>
 8000e36:	2304      	movs	r3, #4
 8000e38:	e008      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e004      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	f002 0203 	and.w	r2, r2, #3
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	4093      	lsls	r3, r2
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5c:	4935      	ldr	r1, [pc, #212]	; (8000f34 <HAL_GPIO_Init+0x2ec>)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb8:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	f67f aea2 	bls.w	8000c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40013c00 	.word	0x40013c00

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e267      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d075      	beq.n	800108e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa2:	4b88      	ldr	r3, [pc, #544]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d00c      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fae:	4b85      	ldr	r3, [pc, #532]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d112      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fba:	4b82      	ldr	r3, [pc, #520]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	4b7e      	ldr	r3, [pc, #504]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d05b      	beq.n	800108c <HAL_RCC_OscConfig+0x108>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d157      	bne.n	800108c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e242      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d106      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x74>
 8000fea:	4b76      	ldr	r3, [pc, #472]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a75      	ldr	r2, [pc, #468]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e01d      	b.n	8001034 <HAL_RCC_OscConfig+0xb0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x98>
 8001002:	4b70      	ldr	r3, [pc, #448]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6f      	ldr	r2, [pc, #444]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b6d      	ldr	r3, [pc, #436]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a6c      	ldr	r2, [pc, #432]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e00b      	b.n	8001034 <HAL_RCC_OscConfig+0xb0>
 800101c:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a68      	ldr	r2, [pc, #416]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a65      	ldr	r2, [pc, #404]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 800102e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d013      	beq.n	8001064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fd12 	bl	8000a64 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001044:	f7ff fd0e 	bl	8000a64 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	; 0x64
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e207      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f0      	beq.n	8001044 <HAL_RCC_OscConfig+0xc0>
 8001062:	e014      	b.n	800108e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fcfe 	bl	8000a64 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcfa 	bl	8000a64 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e1f3      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0xe8>
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d063      	beq.n	8001162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109a:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a6:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d11c      	bne.n	80010ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b2:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d116      	bne.n	80010ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <HAL_RCC_OscConfig+0x152>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e1c7      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4937      	ldr	r1, [pc, #220]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	e03a      	b.n	8001162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d020      	beq.n	8001136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f4:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_RCC_OscConfig+0x244>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fa:	f7ff fcb3 	bl	8000a64 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff fcaf 	bl	8000a64 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1a8      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4925      	ldr	r1, [pc, #148]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
 8001134:	e015      	b.n	8001162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <HAL_RCC_OscConfig+0x244>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113c:	f7ff fc92 	bl	8000a64 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fc8e 	bl	8000a64 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e187      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d036      	beq.n	80011dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d016      	beq.n	80011a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_RCC_OscConfig+0x248>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117c:	f7ff fc72 	bl	8000a64 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fc6e 	bl	8000a64 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e167      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_RCC_OscConfig+0x240>)
 8001198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x200>
 80011a2:	e01b      	b.n	80011dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_RCC_OscConfig+0x248>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fc5b 	bl	8000a64 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	e00e      	b.n	80011d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc57 	bl	8000a64 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d907      	bls.n	80011d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e150      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470000 	.word	0x42470000
 80011cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 80011d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ea      	bne.n	80011b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 8097 	beq.w	8001318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b7d      	ldr	r3, [pc, #500]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a7c      	ldr	r2, [pc, #496]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b7a      	ldr	r3, [pc, #488]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b77      	ldr	r3, [pc, #476]	; (80013f8 <HAL_RCC_OscConfig+0x474>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d118      	bne.n	8001258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	4b74      	ldr	r3, [pc, #464]	; (80013f8 <HAL_RCC_OscConfig+0x474>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a73      	ldr	r2, [pc, #460]	; (80013f8 <HAL_RCC_OscConfig+0x474>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001232:	f7ff fc17 	bl	8000a64 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff fc13 	bl	8000a64 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e10c      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <HAL_RCC_OscConfig+0x474>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x2ea>
 8001260:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001264:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6713      	str	r3, [r2, #112]	; 0x70
 800126c:	e01c      	b.n	80012a8 <HAL_RCC_OscConfig+0x324>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x30c>
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6713      	str	r3, [r2, #112]	; 0x70
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001286:	4a5b      	ldr	r2, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6713      	str	r3, [r2, #112]	; 0x70
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0x324>
 8001290:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001294:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	6713      	str	r3, [r2, #112]	; 0x70
 800129c:	4b55      	ldr	r3, [pc, #340]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 800129e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a0:	4a54      	ldr	r2, [pc, #336]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 80012a2:	f023 0304 	bic.w	r3, r3, #4
 80012a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d015      	beq.n	80012dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b0:	f7ff fbd8 	bl	8000a64 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f7ff fbd4 	bl	8000a64 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e0cb      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ce:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0ee      	beq.n	80012b8 <HAL_RCC_OscConfig+0x334>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fbc2 	bl	8000a64 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f7ff fbbe 	bl	8000a64 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e0b5      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fa:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ee      	bne.n	80012e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a38      	ldr	r2, [pc, #224]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a1 	beq.w	8001464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b08      	cmp	r3, #8
 800132c:	d05c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d141      	bne.n	80013ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_RCC_OscConfig+0x478>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fb92 	bl	8000a64 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff fb8e 	bl	8000a64 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e087      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001356:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69da      	ldr	r2, [r3, #28]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	3b01      	subs	r3, #1
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	061b      	lsls	r3, r3, #24
 8001386:	491b      	ldr	r1, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x478>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb67 	bl	8000a64 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb63 	bl	8000a64 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e05c      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x416>
 80013b8:	e054      	b.n	8001464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x478>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb50 	bl	8000a64 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fb4c 	bl	8000a64 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e045      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_RCC_OscConfig+0x470>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x444>
 80013e6:	e03d      	b.n	8001464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e038      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40007000 	.word	0x40007000
 80013fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x4ec>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d028      	beq.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d121      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d11a      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001430:	4013      	ands	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001438:	4293      	cmp	r3, r2
 800143a:	d111      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	085b      	lsrs	r3, r3, #1
 8001448:	3b01      	subs	r3, #1
 800144a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0cc      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d90c      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0b8      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	494d      	ldr	r1, [pc, #308]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d044      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d119      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d003      	beq.n	8001532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152e:	2b03      	cmp	r3, #3
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e067      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4934      	ldr	r1, [pc, #208]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff fa7e 	bl	8000a64 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fa7a 	bl	8000a64 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e04f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d20c      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e032      	b.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4916      	ldr	r1, [pc, #88]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fa:	f000 f821 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	490a      	ldr	r1, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	5ccb      	ldrb	r3, [r1, r3]
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f9de 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00
 8001630:	40023800 	.word	0x40023800
 8001634:	08004170 	.word	0x08004170
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001644:	b090      	sub	sp, #64	; 0x40
 8001646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001650:	2300      	movs	r3, #0
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001658:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d00d      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x40>
 8001664:	2b08      	cmp	r3, #8
 8001666:	f200 80a1 	bhi.w	80017ac <HAL_RCC_GetSysClockFreq+0x16c>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x34>
 800166e:	2b04      	cmp	r3, #4
 8001670:	d003      	beq.n	800167a <HAL_RCC_GetSysClockFreq+0x3a>
 8001672:	e09b      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001678:	e09b      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800167e:	e098      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001680:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d028      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	2200      	movs	r2, #0
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	627a      	str	r2, [r7, #36]	; 0x24
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016a8:	2100      	movs	r1, #0
 80016aa:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ac:	fb03 f201 	mul.w	r2, r3, r1
 80016b0:	2300      	movs	r3, #0
 80016b2:	fb00 f303 	mul.w	r3, r0, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	4a43      	ldr	r2, [pc, #268]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ba:	fba0 1202 	umull	r1, r2, r0, r2
 80016be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016c0:	460a      	mov	r2, r1
 80016c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80016c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c6:	4413      	add	r3, r2
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016cc:	2200      	movs	r2, #0
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	61fa      	str	r2, [r7, #28]
 80016d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016da:	f7fe fd81 	bl	80001e0 <__aeabi_uldivmod>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4613      	mov	r3, r2
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e6:	e053      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e8:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	2200      	movs	r2, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	617a      	str	r2, [r7, #20]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016fa:	f04f 0b00 	mov.w	fp, #0
 80016fe:	4652      	mov	r2, sl
 8001700:	465b      	mov	r3, fp
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	0159      	lsls	r1, r3, #5
 800170c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001710:	0150      	lsls	r0, r2, #5
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	ebb2 080a 	subs.w	r8, r2, sl
 800171a:	eb63 090b 	sbc.w	r9, r3, fp
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800172a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800172e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001732:	ebb2 0408 	subs.w	r4, r2, r8
 8001736:	eb63 0509 	sbc.w	r5, r3, r9
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	00eb      	lsls	r3, r5, #3
 8001744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001748:	00e2      	lsls	r2, r4, #3
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	eb14 030a 	adds.w	r3, r4, sl
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	eb45 030b 	adc.w	r3, r5, fp
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001766:	4629      	mov	r1, r5
 8001768:	028b      	lsls	r3, r1, #10
 800176a:	4621      	mov	r1, r4
 800176c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001770:	4621      	mov	r1, r4
 8001772:	028a      	lsls	r2, r1, #10
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	2200      	movs	r2, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	60fa      	str	r2, [r7, #12]
 8001780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001784:	f7fe fd2c 	bl	80001e0 <__aeabi_uldivmod>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4613      	mov	r3, r2
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	3301      	adds	r3, #1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017aa:	e002      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3740      	adds	r7, #64	; 0x40
 80017b8:	46bd      	mov	sp, r7
 80017ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	00f42400 	.word	0x00f42400
 80017c8:	017d7840 	.word	0x017d7840

080017cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017e8:	f7ff fff0 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	0a9b      	lsrs	r3, r3, #10
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	4903      	ldr	r1, [pc, #12]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	08004180 	.word	0x08004180

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001810:	f7ff ffdc 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0b5b      	lsrs	r3, r3, #13
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	08004180 	.word	0x08004180

08001834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e03f      	b.n	80018c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe fff4 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f929 	bl	8001ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800188c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800189c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b08a      	sub	sp, #40	; 0x28
 80018d2:	af02      	add	r7, sp, #8
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d17c      	bne.n	80019e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_UART_Transmit+0x2c>
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e075      	b.n	80019ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_UART_Transmit+0x3e>
 8001908:	2302      	movs	r3, #2
 800190a:	e06e      	b.n	80019ea <HAL_UART_Transmit+0x11c>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2221      	movs	r2, #33	; 0x21
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001922:	f7ff f89f 	bl	8000a64 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193c:	d108      	bne.n	8001950 <HAL_UART_Transmit+0x82>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d104      	bne.n	8001950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	e003      	b.n	8001958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001960:	e02a      	b.n	80019b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2200      	movs	r2, #0
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f840 	bl	80019f2 <UART_WaitOnFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e036      	b.n	80019ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10b      	bne.n	800199a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	3302      	adds	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	e007      	b.n	80019aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	3301      	adds	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1cf      	bne.n	8001962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f810 	bl	80019f2 <UART_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e006      	b.n	80019ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b090      	sub	sp, #64	; 0x40
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a02:	e050      	b.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a0a:	d04c      	beq.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a12:	f7ff f827 	bl	8000a64 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d241      	bcs.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	330c      	adds	r3, #12
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	e853 3f00 	ldrex	r3, [r3]
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	330c      	adds	r3, #12
 8001a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a42:	637a      	str	r2, [r7, #52]	; 0x34
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a4a:	e841 2300 	strex	r3, r2, [r1]
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1e5      	bne.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	e853 3f00 	ldrex	r3, [r3]
 8001a64:	613b      	str	r3, [r7, #16]
   return(result);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3314      	adds	r3, #20
 8001a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a76:	623a      	str	r2, [r7, #32]
 8001a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a7a:	69f9      	ldr	r1, [r7, #28]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	e841 2300 	strex	r3, r2, [r1]
 8001a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e5      	bne.n	8001a56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e00f      	b.n	8001ac6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d09f      	beq.n	8001a04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3740      	adds	r7, #64	; 0x40
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad4:	b0c0      	sub	sp, #256	; 0x100
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aec:	68d9      	ldr	r1, [r3, #12]
 8001aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	ea40 0301 	orr.w	r3, r0, r1
 8001af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b28:	f021 010c 	bic.w	r1, r1, #12
 8001b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b36:	430b      	orrs	r3, r1
 8001b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b4a:	6999      	ldr	r1, [r3, #24]
 8001b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	ea40 0301 	orr.w	r3, r0, r1
 8001b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b8f      	ldr	r3, [pc, #572]	; (8001d9c <UART_SetConfig+0x2cc>)
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d005      	beq.n	8001b70 <UART_SetConfig+0xa0>
 8001b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b8d      	ldr	r3, [pc, #564]	; (8001da0 <UART_SetConfig+0x2d0>)
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d104      	bne.n	8001b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b70:	f7ff fe4c 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 8001b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001b78:	e003      	b.n	8001b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b7a:	f7ff fe33 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8c:	f040 810c 	bne.w	8001da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b94:	2200      	movs	r2, #0
 8001b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	1891      	adds	r1, r2, r2
 8001ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001baa:	415b      	adcs	r3, r3
 8001bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	eb12 0801 	adds.w	r8, r2, r1
 8001bb8:	4629      	mov	r1, r5
 8001bba:	eb43 0901 	adc.w	r9, r3, r1
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bd2:	4690      	mov	r8, r2
 8001bd4:	4699      	mov	r9, r3
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	eb18 0303 	adds.w	r3, r8, r3
 8001bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001be0:	462b      	mov	r3, r5
 8001be2:	eb49 0303 	adc.w	r3, r9, r3
 8001be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001bfe:	460b      	mov	r3, r1
 8001c00:	18db      	adds	r3, r3, r3
 8001c02:	653b      	str	r3, [r7, #80]	; 0x50
 8001c04:	4613      	mov	r3, r2
 8001c06:	eb42 0303 	adc.w	r3, r2, r3
 8001c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c14:	f7fe fae4 	bl	80001e0 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <UART_SetConfig+0x2d4>)
 8001c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	011c      	lsls	r4, r3, #4
 8001c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001c38:	4642      	mov	r2, r8
 8001c3a:	464b      	mov	r3, r9
 8001c3c:	1891      	adds	r1, r2, r2
 8001c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c40:	415b      	adcs	r3, r3
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c48:	4641      	mov	r1, r8
 8001c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	eb43 0b01 	adc.w	fp, r3, r1
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c68:	4692      	mov	sl, r2
 8001c6a:	469b      	mov	fp, r3
 8001c6c:	4643      	mov	r3, r8
 8001c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8001c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c76:	464b      	mov	r3, r9
 8001c78:	eb4b 0303 	adc.w	r3, fp, r3
 8001c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001c94:	460b      	mov	r3, r1
 8001c96:	18db      	adds	r3, r3, r3
 8001c98:	643b      	str	r3, [r7, #64]	; 0x40
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	eb42 0303 	adc.w	r3, r2, r3
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001caa:	f7fe fa99 	bl	80001e0 <__aeabi_uldivmod>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <UART_SetConfig+0x2d4>)
 8001cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2264      	movs	r2, #100	; 0x64
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	1acb      	subs	r3, r1, r3
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <UART_SetConfig+0x2d4>)
 8001ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cd8:	441c      	add	r4, r3
 8001cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001cec:	4642      	mov	r2, r8
 8001cee:	464b      	mov	r3, r9
 8001cf0:	1891      	adds	r1, r2, r2
 8001cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cf4:	415b      	adcs	r3, r3
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	1851      	adds	r1, r2, r1
 8001d00:	6339      	str	r1, [r7, #48]	; 0x30
 8001d02:	4649      	mov	r1, r9
 8001d04:	414b      	adcs	r3, r1
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d14:	4659      	mov	r1, fp
 8001d16:	00cb      	lsls	r3, r1, #3
 8001d18:	4651      	mov	r1, sl
 8001d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d1e:	4651      	mov	r1, sl
 8001d20:	00ca      	lsls	r2, r1, #3
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	4642      	mov	r2, r8
 8001d2a:	189b      	adds	r3, r3, r2
 8001d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d30:	464b      	mov	r3, r9
 8001d32:	460a      	mov	r2, r1
 8001d34:	eb42 0303 	adc.w	r3, r2, r3
 8001d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001d50:	460b      	mov	r3, r1
 8001d52:	18db      	adds	r3, r3, r3
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d56:	4613      	mov	r3, r2
 8001d58:	eb42 0303 	adc.w	r3, r2, r3
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001d66:	f7fe fa3b 	bl	80001e0 <__aeabi_uldivmod>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <UART_SetConfig+0x2d4>)
 8001d70:	fba3 1302 	umull	r1, r3, r3, r2
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	2164      	movs	r1, #100	; 0x64
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	3332      	adds	r3, #50	; 0x32
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <UART_SetConfig+0x2d4>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	f003 0207 	and.w	r2, r3, #7
 8001d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4422      	add	r2, r4
 8001d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d98:	e105      	b.n	8001fa6 <UART_SetConfig+0x4d6>
 8001d9a:	bf00      	nop
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40011400 	.word	0x40011400
 8001da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001dba:	4642      	mov	r2, r8
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	1891      	adds	r1, r2, r2
 8001dc0:	6239      	str	r1, [r7, #32]
 8001dc2:	415b      	adcs	r3, r3
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dca:	4641      	mov	r1, r8
 8001dcc:	1854      	adds	r4, r2, r1
 8001dce:	4649      	mov	r1, r9
 8001dd0:	eb43 0501 	adc.w	r5, r3, r1
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	00eb      	lsls	r3, r5, #3
 8001dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de2:	00e2      	lsls	r2, r4, #3
 8001de4:	4614      	mov	r4, r2
 8001de6:	461d      	mov	r5, r3
 8001de8:	4643      	mov	r3, r8
 8001dea:	18e3      	adds	r3, r4, r3
 8001dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001df0:	464b      	mov	r3, r9
 8001df2:	eb45 0303 	adc.w	r3, r5, r3
 8001df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e16:	4629      	mov	r1, r5
 8001e18:	008b      	lsls	r3, r1, #2
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e20:	4621      	mov	r1, r4
 8001e22:	008a      	lsls	r2, r1, #2
 8001e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e28:	f7fe f9da 	bl	80001e0 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <UART_SetConfig+0x4e4>)
 8001e32:	fba3 2302 	umull	r2, r3, r3, r2
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	011c      	lsls	r4, r3, #4
 8001e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e4c:	4642      	mov	r2, r8
 8001e4e:	464b      	mov	r3, r9
 8001e50:	1891      	adds	r1, r2, r2
 8001e52:	61b9      	str	r1, [r7, #24]
 8001e54:	415b      	adcs	r3, r3
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	1851      	adds	r1, r2, r1
 8001e60:	6139      	str	r1, [r7, #16]
 8001e62:	4649      	mov	r1, r9
 8001e64:	414b      	adcs	r3, r1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e74:	4659      	mov	r1, fp
 8001e76:	00cb      	lsls	r3, r1, #3
 8001e78:	4651      	mov	r1, sl
 8001e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e7e:	4651      	mov	r1, sl
 8001e80:	00ca      	lsls	r2, r1, #3
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	4642      	mov	r2, r8
 8001e8a:	189b      	adds	r3, r3, r2
 8001e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e90:	464b      	mov	r3, r9
 8001e92:	460a      	mov	r2, r1
 8001e94:	eb42 0303 	adc.w	r3, r2, r3
 8001e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	008b      	lsls	r3, r1, #2
 8001eb8:	4641      	mov	r1, r8
 8001eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	008a      	lsls	r2, r1, #2
 8001ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ec6:	f7fe f98b 	bl	80001e0 <__aeabi_uldivmod>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <UART_SetConfig+0x4e4>)
 8001ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	2164      	movs	r1, #100	; 0x64
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	3332      	adds	r3, #50	; 0x32
 8001ee2:	4a34      	ldr	r2, [pc, #208]	; (8001fb4 <UART_SetConfig+0x4e4>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eee:	441c      	add	r4, r3
 8001ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8001ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8001efa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001efe:	4642      	mov	r2, r8
 8001f00:	464b      	mov	r3, r9
 8001f02:	1891      	adds	r1, r2, r2
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	415b      	adcs	r3, r3
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f0e:	4641      	mov	r1, r8
 8001f10:	1851      	adds	r1, r2, r1
 8001f12:	6039      	str	r1, [r7, #0]
 8001f14:	4649      	mov	r1, r9
 8001f16:	414b      	adcs	r3, r1
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f26:	4659      	mov	r1, fp
 8001f28:	00cb      	lsls	r3, r1, #3
 8001f2a:	4651      	mov	r1, sl
 8001f2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f30:	4651      	mov	r1, sl
 8001f32:	00ca      	lsls	r2, r1, #3
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4642      	mov	r2, r8
 8001f3c:	189b      	adds	r3, r3, r2
 8001f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f40:	464b      	mov	r3, r9
 8001f42:	460a      	mov	r2, r1
 8001f44:	eb42 0303 	adc.w	r3, r2, r3
 8001f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	663b      	str	r3, [r7, #96]	; 0x60
 8001f54:	667a      	str	r2, [r7, #100]	; 0x64
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001f62:	4649      	mov	r1, r9
 8001f64:	008b      	lsls	r3, r1, #2
 8001f66:	4641      	mov	r1, r8
 8001f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	008a      	lsls	r2, r1, #2
 8001f70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f74:	f7fe f934 	bl	80001e0 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <UART_SetConfig+0x4e4>)
 8001f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2164      	movs	r1, #100	; 0x64
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	3332      	adds	r3, #50	; 0x32
 8001f90:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <UART_SetConfig+0x4e4>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4422      	add	r2, r4
 8001fa4:	609a      	str	r2, [r3, #8]
}
 8001fa6:	bf00      	nop
 8001fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001fac:	46bd      	mov	sp, r7
 8001fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb2:	bf00      	nop
 8001fb4:	51eb851f 	.word	0x51eb851f

08001fb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fca:	2b84      	cmp	r3, #132	; 0x84
 8001fcc:	d005      	beq.n	8001fda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3303      	adds	r3, #3
 8001fd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001fec:	f000 fe66 	bl	8002cbc <vTaskStartScheduler>
  
  return osOK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff8:	b089      	sub	sp, #36	; 0x24
 8001ffa:	af04      	add	r7, sp, #16
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <osThreadCreate+0x54>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01c      	beq.n	800204a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685c      	ldr	r4, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681d      	ldr	r5, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691e      	ldr	r6, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ffc8 	bl	8001fb8 <makeFreeRtosPriority>
 8002028:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002032:	9202      	str	r2, [sp, #8]
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	9100      	str	r1, [sp, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4632      	mov	r2, r6
 800203c:	4629      	mov	r1, r5
 800203e:	4620      	mov	r0, r4
 8002040:	f000 fc5e 	bl	8002900 <xTaskCreateStatic>
 8002044:	4603      	mov	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e01c      	b.n	8002084 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685c      	ldr	r4, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002056:	b29e      	uxth	r6, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ffaa 	bl	8001fb8 <makeFreeRtosPriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	9200      	str	r2, [sp, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	4632      	mov	r2, r6
 8002072:	4629      	mov	r1, r5
 8002074:	4620      	mov	r0, r4
 8002076:	f000 fca0 	bl	80029ba <xTaskCreate>
 800207a:	4603      	mov	r3, r0
 800207c:	2b01      	cmp	r3, #1
 800207e:	d001      	beq.n	8002084 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	e000      	b.n	8002086 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800208e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <osDelay+0x16>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	e000      	b.n	80020a6 <osDelay+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fdd4 	bl	8002c54 <vTaskDelay>
  
  return osOK;
 80020ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4619      	mov	r1, r3
 80020cc:	2001      	movs	r0, #1
 80020ce:	f000 fa2a 	bl	8002526 <xQueueCreateMutexStatic>
 80020d2:	4603      	mov	r3, r0
 80020d4:	e003      	b.n	80020de <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 fa0d 	bl	80024f6 <xQueueCreateMutex>
 80020dc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f103 0208 	add.w	r2, r3, #8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0208 	add.w	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 0208 	add.w	r2, r3, #8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219e:	d103      	bne.n	80021a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e00c      	b.n	80021c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3308      	adds	r3, #8
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e002      	b.n	80021b6 <vListInsert+0x2e>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d2f6      	bcs.n	80021b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6892      	ldr	r2, [r2, #8]
 8002210:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6852      	ldr	r2, [r2, #4]
 800221a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d103      	bne.n	800222e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002276:	bf00      	nop
 8002278:	e7fe      	b.n	8002278 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800227a:	f001 fb6b 	bl	8003954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	441a      	add	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	3b01      	subs	r3, #1
 80022ac:	68f9      	ldr	r1, [r7, #12]
 80022ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	441a      	add	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	22ff      	movs	r2, #255	; 0xff
 80022be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	22ff      	movs	r2, #255	; 0xff
 80022c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d114      	bne.n	80022fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01a      	beq.n	800230e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3310      	adds	r3, #16
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 ff3f 	bl	8003160 <xTaskRemoveFromEventList>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <xQueueGenericReset+0xcc>)
 80022ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	e009      	b.n	800230e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3310      	adds	r3, #16
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fef1 	bl	80020e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3324      	adds	r3, #36	; 0x24
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff feec 	bl	80020e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800230e:	f001 fb51 	bl	80039b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	e000ed04 	.word	0xe000ed04

08002320 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002346:	bf00      	nop
 8002348:	e7fe      	b.n	8002348 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002362:	bf00      	nop
 8002364:	e7fe      	b.n	8002364 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <xQueueGenericCreateStatic+0x52>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <xQueueGenericCreateStatic+0x56>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <xQueueGenericCreateStatic+0x58>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	623b      	str	r3, [r7, #32]
}
 800238e:	bf00      	nop
 8002390:	e7fe      	b.n	8002390 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <xQueueGenericCreateStatic+0x7e>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <xQueueGenericCreateStatic+0x82>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <xQueueGenericCreateStatic+0x84>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	61fb      	str	r3, [r7, #28]
}
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023be:	2348      	movs	r3, #72	; 0x48
 80023c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b48      	cmp	r3, #72	; 0x48
 80023c6:	d00a      	beq.n	80023de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	61bb      	str	r3, [r7, #24]
}
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00d      	beq.n	8002406 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f83f 	bl	8002484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002408:	4618      	mov	r0, r3
 800240a:	3730      	adds	r7, #48	; 0x30
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	613b      	str	r3, [r7, #16]
}
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3348      	adds	r3, #72	; 0x48
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fb65 	bl	8003b18 <pvPortMalloc>
 800244e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d011      	beq.n	800247a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3348      	adds	r3, #72	; 0x48
 800245e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002468:	79fa      	ldrb	r2, [r7, #7]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f805 	bl	8002484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800247a:	69bb      	ldr	r3, [r7, #24]
	}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e002      	b.n	80024a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024b2:	2101      	movs	r1, #1
 80024b4:	69b8      	ldr	r0, [r7, #24]
 80024b6:	f7ff fecb 	bl	8002250 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80024e2:	2300      	movs	r3, #0
 80024e4:	2200      	movs	r2, #0
 80024e6:	2100      	movs	r1, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f837 	bl	800255c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002500:	2301      	movs	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	461a      	mov	r2, r3
 800250c:	6939      	ldr	r1, [r7, #16]
 800250e:	6978      	ldr	r0, [r7, #20]
 8002510:	f7ff ff7e 	bl	8002410 <xQueueGenericCreate>
 8002514:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff ffd3 	bl	80024c2 <prvInitialiseMutex>

		return xNewQueue;
 800251c:	68fb      	ldr	r3, [r7, #12]
	}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002526:	b580      	push	{r7, lr}
 8002528:	b088      	sub	sp, #32
 800252a:	af02      	add	r7, sp, #8
 800252c:	4603      	mov	r3, r0
 800252e:	6039      	str	r1, [r7, #0]
 8002530:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002532:	2301      	movs	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2200      	movs	r2, #0
 8002542:	6939      	ldr	r1, [r7, #16]
 8002544:	6978      	ldr	r0, [r7, #20]
 8002546:	f7ff feeb 	bl	8002320 <xQueueGenericCreateStatic>
 800254a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff ffb8 	bl	80024c2 <prvInitialiseMutex>

		return xNewQueue;
 8002552:	68fb      	ldr	r3, [r7, #12]
	}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueGenericSend+0x32>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <xQueueGenericSend+0x40>
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <xQueueGenericSend+0x44>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <xQueueGenericSend+0x46>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <xQueueGenericSend+0x60>
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d103      	bne.n	80025ca <xQueueGenericSend+0x6e>
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <xQueueGenericSend+0x72>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <xQueueGenericSend+0x74>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericSend+0x8e>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	623b      	str	r3, [r7, #32]
}
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ea:	f000 ff79 	bl	80034e0 <xTaskGetSchedulerState>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <xQueueGenericSend+0x9e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <xQueueGenericSend+0xa2>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueGenericSend+0xa4>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xQueueGenericSend+0xbe>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61fb      	str	r3, [r7, #28]
}
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800261a:	f001 f99b 	bl	8003954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <xQueueGenericSend+0xd4>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d129      	bne.n	8002684 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002636:	f000 f88f 	bl	8002758 <prvCopyDataToQueue>
 800263a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	3324      	adds	r3, #36	; 0x24
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fd89 	bl	8003160 <xTaskRemoveFromEventList>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002654:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <xQueueGenericSend+0x1f8>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	e00a      	b.n	800267c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <xQueueGenericSend+0x1f8>)
 800266e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800267c:	f001 f99a 	bl	80039b4 <vPortExitCritical>
				return pdPASS;
 8002680:	2301      	movs	r3, #1
 8002682:	e063      	b.n	800274c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800268a:	f001 f993 	bl	80039b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800268e:	2300      	movs	r3, #0
 8002690:	e05c      	b.n	800274c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fdc1 	bl	8003224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026a6:	f001 f985 	bl	80039b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026aa:	f000 fb71 	bl	8002d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026ae:	f001 f951 	bl	8003954 <vPortEnterCritical>
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026be:	d103      	bne.n	80026c8 <xQueueGenericSend+0x16c>
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d4:	d103      	bne.n	80026de <xQueueGenericSend+0x182>
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026de:	f001 f969 	bl	80039b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026e2:	1d3a      	adds	r2, r7, #4
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fdb0 	bl	8003250 <xTaskCheckForTimeOut>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d124      	bne.n	8002740 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f8:	f000 f8ea 	bl	80028d0 <prvIsQueueFull>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d018      	beq.n	8002734 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	3310      	adds	r3, #16
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fd04 	bl	8003118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002712:	f000 f88b 	bl	800282c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002716:	f000 fb49 	bl	8002dac <xTaskResumeAll>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	f47f af7c 	bne.w	800261a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <xQueueGenericSend+0x1f8>)
 8002724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	e772      	b.n	800261a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002736:	f000 f879 	bl	800282c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800273a:	f000 fb37 	bl	8002dac <xTaskResumeAll>
 800273e:	e76c      	b.n	800261a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002742:	f000 f873 	bl	800282c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002746:	f000 fb31 	bl	8002dac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800274a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800274c:	4618      	mov	r0, r3
 800274e:	3738      	adds	r7, #56	; 0x38
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	e000ed04 	.word	0xe000ed04

08002758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d14d      	bne.n	800281a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 feca 	bl	800351c <xTaskPriorityDisinherit>
 8002788:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e043      	b.n	800281a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d119      	bne.n	80027cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6858      	ldr	r0, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	461a      	mov	r2, r3
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	f001 fbc8 	bl	8003f38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	441a      	add	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d32b      	bcc.n	800281a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	e026      	b.n	800281a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	68d8      	ldr	r0, [r3, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	461a      	mov	r2, r3
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	f001 fbae 	bl	8003f38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	425b      	negs	r3, r3
 80027e6:	441a      	add	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	425b      	negs	r3, r3
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d105      	bne.n	800281a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3b01      	subs	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002822:	697b      	ldr	r3, [r7, #20]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002834:	f001 f88e 	bl	8003954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800283e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002840:	e011      	b.n	8002866 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d012      	beq.n	8002870 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3324      	adds	r3, #36	; 0x24
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fc86 	bl	8003160 <xTaskRemoveFromEventList>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800285a:	f000 fd5b 	bl	8003314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	3b01      	subs	r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	dce9      	bgt.n	8002842 <prvUnlockQueue+0x16>
 800286e:	e000      	b.n	8002872 <prvUnlockQueue+0x46>
					break;
 8002870:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	22ff      	movs	r2, #255	; 0xff
 8002876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800287a:	f001 f89b 	bl	80039b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800287e:	f001 f869 	bl	8003954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002888:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800288a:	e011      	b.n	80028b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3310      	adds	r3, #16
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fc61 	bl	8003160 <xTaskRemoveFromEventList>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028a4:	f000 fd36 	bl	8003314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	dce9      	bgt.n	800288c <prvUnlockQueue+0x60>
 80028b8:	e000      	b.n	80028bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	22ff      	movs	r2, #255	; 0xff
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028c4:	f001 f876 	bl	80039b4 <vPortExitCritical>
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028d8:	f001 f83c 	bl	8003954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d102      	bne.n	80028ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e001      	b.n	80028f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028f2:	f001 f85f 	bl	80039b4 <vPortExitCritical>

	return xReturn;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	; 0x38
 8002904:	af04      	add	r7, sp, #16
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	623b      	str	r3, [r7, #32]
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <xTaskCreateStatic+0x46>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	61fb      	str	r3, [r7, #28]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002946:	23b4      	movs	r3, #180	; 0xb4
 8002948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2bb4      	cmp	r3, #180	; 0xb4
 800294e:	d00a      	beq.n	8002966 <xTaskCreateStatic+0x66>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	61bb      	str	r3, [r7, #24]
}
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002966:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01e      	beq.n	80029ac <xTaskCreateStatic+0xac>
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	2202      	movs	r2, #2
 8002982:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002986:	2300      	movs	r3, #0
 8002988:	9303      	str	r3, [sp, #12]
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9302      	str	r3, [sp, #8]
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f850 	bl	8002a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029a6:	f000 f8eb 	bl	8002b80 <prvAddNewTaskToReadyList>
 80029aa:	e001      	b.n	80029b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029b0:	697b      	ldr	r3, [r7, #20]
	}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3728      	adds	r7, #40	; 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08c      	sub	sp, #48	; 0x30
 80029be:	af04      	add	r7, sp, #16
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 f8a2 	bl	8003b18 <pvPortMalloc>
 80029d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00e      	beq.n	80029fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029dc:	20b4      	movs	r0, #180	; 0xb4
 80029de:	f001 f89b 	bl	8003b18 <pvPortMalloc>
 80029e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
 80029f0:	e005      	b.n	80029fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f001 f95c 	bl	8003cb0 <vPortFree>
 80029f8:	e001      	b.n	80029fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d017      	beq.n	8002a34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9303      	str	r3, [sp, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	9302      	str	r3, [sp, #8]
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f80e 	bl	8002a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a28:	69f8      	ldr	r0, [r7, #28]
 8002a2a:	f000 f8a9 	bl	8002b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	e002      	b.n	8002a3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f023 0307 	bic.w	r3, r3, #7
 8002a6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	617b      	str	r3, [r7, #20]
}
 8002a88:	bf00      	nop
 8002a8a:	e7fe      	b.n	8002a8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01f      	beq.n	8002ad2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	e012      	b.n	8002abe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	7819      	ldrb	r1, [r3, #0]
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3334      	adds	r3, #52	; 0x34
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d9e9      	bls.n	8002a98 <prvInitialiseNewTask+0x54>
 8002ac4:	e000      	b.n	8002ac8 <prvInitialiseNewTask+0x84>
			{
				break;
 8002ac6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad0:	e003      	b.n	8002ada <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	2b06      	cmp	r3, #6
 8002ade:	d901      	bls.n	8002ae4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ae0:	2306      	movs	r3, #6
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	2200      	movs	r2, #0
 8002af4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	3304      	adds	r3, #4
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fb13 	bl	8002126 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	3318      	adds	r3, #24
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fb0e 	bl	8002126 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	f1c3 0207 	rsb	r2, r3, #7
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	334c      	adds	r3, #76	; 0x4c
 8002b34:	2260      	movs	r2, #96	; 0x60
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 fa0b 	bl	8003f54 <memset>
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <prvInitialiseNewTask+0x130>)
 8002b42:	651a      	str	r2, [r3, #80]	; 0x50
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <prvInitialiseNewTask+0x134>)
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <prvInitialiseNewTask+0x138>)
 8002b4e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	69b8      	ldr	r0, [r7, #24]
 8002b56:	f000 fdcd 	bl	80036f4 <pxPortInitialiseStack>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b6c:	bf00      	nop
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	080041a8 	.word	0x080041a8
 8002b78:	080041c8 	.word	0x080041c8
 8002b7c:	08004188 	.word	0x08004188

08002b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b88:	f000 fee4 	bl	8003954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <prvAddNewTaskToReadyList+0xb8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <prvAddNewTaskToReadyList+0xb8>)
 8002b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b96:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <prvAddNewTaskToReadyList+0xbc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b9e:	4a27      	ldr	r2, [pc, #156]	; (8002c3c <prvAddNewTaskToReadyList+0xbc>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <prvAddNewTaskToReadyList+0xb8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d110      	bne.n	8002bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bac:	f000 fbd6 	bl	800335c <prvInitialiseTaskLists>
 8002bb0:	e00d      	b.n	8002bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bb2:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <prvAddNewTaskToReadyList+0xc0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <prvAddNewTaskToReadyList+0xbc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d802      	bhi.n	8002bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <prvAddNewTaskToReadyList+0xbc>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <prvAddNewTaskToReadyList+0xc4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <prvAddNewTaskToReadyList+0xc4>)
 8002bd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <prvAddNewTaskToReadyList+0xc8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <prvAddNewTaskToReadyList+0xc8>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <prvAddNewTaskToReadyList+0xcc>)
 8002bf8:	441a      	add	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f7ff fa9d 	bl	8002140 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c06:	f000 fed5 	bl	80039b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <prvAddNewTaskToReadyList+0xc0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00e      	beq.n	8002c30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <prvAddNewTaskToReadyList+0xbc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d207      	bcs.n	8002c30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <prvAddNewTaskToReadyList+0xd0>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000498 	.word	0x20000498
 8002c3c:	20000398 	.word	0x20000398
 8002c40:	200004a4 	.word	0x200004a4
 8002c44:	200004b4 	.word	0x200004b4
 8002c48:	200004a0 	.word	0x200004a0
 8002c4c:	2000039c 	.word	0x2000039c
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d017      	beq.n	8002c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <vTaskDelay+0x60>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <vTaskDelay+0x30>
	__asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	60bb      	str	r3, [r7, #8]
}
 8002c80:	bf00      	nop
 8002c82:	e7fe      	b.n	8002c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c84:	f000 f884 	bl	8002d90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c88:	2100      	movs	r1, #0
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fccc 	bl	8003628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c90:	f000 f88c 	bl	8002dac <xTaskResumeAll>
 8002c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <vTaskDelay+0x64>)
 8002c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200004c0 	.word	0x200004c0
 8002cb8:	e000ed04 	.word	0xe000ed04

08002cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cca:	463a      	mov	r2, r7
 8002ccc:	1d39      	adds	r1, r7, #4
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc06 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cd8:	6839      	ldr	r1, [r7, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	9202      	str	r2, [sp, #8]
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	460a      	mov	r2, r1
 8002cea:	4921      	ldr	r1, [pc, #132]	; (8002d70 <vTaskStartScheduler+0xb4>)
 8002cec:	4821      	ldr	r0, [pc, #132]	; (8002d74 <vTaskStartScheduler+0xb8>)
 8002cee:	f7ff fe07 	bl	8002900 <xTaskCreateStatic>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <vTaskStartScheduler+0xbc>)
 8002cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <vTaskStartScheduler+0xbc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d00:	2301      	movs	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e001      	b.n	8002d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d11b      	bne.n	8002d48 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	613b      	str	r3, [r7, #16]
}
 8002d22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <vTaskStartScheduler+0xc0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	334c      	adds	r3, #76	; 0x4c
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <vTaskStartScheduler+0xc4>)
 8002d2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <vTaskStartScheduler+0xc8>)
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <vTaskStartScheduler+0xcc>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <vTaskStartScheduler+0xd0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d42:	f000 fd65 	bl	8003810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d46:	e00e      	b.n	8002d66 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4e:	d10a      	bne.n	8002d66 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	60fb      	str	r3, [r7, #12]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <vTaskStartScheduler+0xa8>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	08004168 	.word	0x08004168
 8002d74:	0800332d 	.word	0x0800332d
 8002d78:	200004bc 	.word	0x200004bc
 8002d7c:	20000398 	.word	0x20000398
 8002d80:	20000010 	.word	0x20000010
 8002d84:	200004b8 	.word	0x200004b8
 8002d88:	200004a4 	.word	0x200004a4
 8002d8c:	2000049c 	.word	0x2000049c

08002d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <vTaskSuspendAll+0x18>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <vTaskSuspendAll+0x18>)
 8002d9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	200004c0 	.word	0x200004c0

08002dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	603b      	str	r3, [r7, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dd8:	f000 fdbc 	bl	8003954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002de4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d161      	bne.n	8002eb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dee:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <xTaskResumeAll+0x118>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d05d      	beq.n	8002eb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df6:	e02e      	b.n	8002e56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002df8:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <xTaskResumeAll+0x11c>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3318      	adds	r3, #24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f9f8 	bl	80021fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f9f3 	bl	80021fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2201      	movs	r2, #1
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <xTaskResumeAll+0x120>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <xTaskResumeAll+0x120>)
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <xTaskResumeAll+0x124>)
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f7ff f97f 	bl	8002140 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <xTaskResumeAll+0x128>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d302      	bcc.n	8002e56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <xTaskResumeAll+0x12c>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <xTaskResumeAll+0x11c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1cc      	bne.n	8002df8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e64:	f000 fb1c 	bl	80034a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e68:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <xTaskResumeAll+0x130>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e74:	f000 f836 	bl	8002ee4 <xTaskIncrementTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <xTaskResumeAll+0x12c>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f1      	bne.n	8002e74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <xTaskResumeAll+0x130>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <xTaskResumeAll+0x12c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <xTaskResumeAll+0x134>)
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eb2:	f000 fd7f 	bl	80039b4 <vPortExitCritical>

	return xAlreadyYielded;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200004c0 	.word	0x200004c0
 8002ec4:	20000498 	.word	0x20000498
 8002ec8:	20000458 	.word	0x20000458
 8002ecc:	200004a0 	.word	0x200004a0
 8002ed0:	2000039c 	.word	0x2000039c
 8002ed4:	20000398 	.word	0x20000398
 8002ed8:	200004ac 	.word	0x200004ac
 8002edc:	200004a8 	.word	0x200004a8
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eee:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <xTaskIncrementTick+0x144>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 808e 	bne.w	8003014 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <xTaskIncrementTick+0x148>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f00:	4a4a      	ldr	r2, [pc, #296]	; (800302c <xTaskIncrementTick+0x148>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d120      	bne.n	8002f4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f0c:	4b48      	ldr	r3, [pc, #288]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <xTaskIncrementTick+0x48>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	603b      	str	r3, [r7, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xTaskIncrementTick+0x46>
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b40      	ldr	r3, [pc, #256]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a3e      	ldr	r2, [pc, #248]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4a3e      	ldr	r2, [pc, #248]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <xTaskIncrementTick+0x154>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <xTaskIncrementTick+0x154>)
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	f000 faa9 	bl	80034a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <xTaskIncrementTick+0x158>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d348      	bcc.n	8002fea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f58:	4b35      	ldr	r3, [pc, #212]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <xTaskIncrementTick+0x158>)
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f68:	601a      	str	r2, [r3, #0]
					break;
 8002f6a:	e03e      	b.n	8002fea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d203      	bcs.n	8002f8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <xTaskIncrementTick+0x158>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f8a:	e02e      	b.n	8002fea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff f932 	bl	80021fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f929 	bl	80021fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	2201      	movs	r2, #1
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <xTaskIncrementTick+0x15c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	4a22      	ldr	r2, [pc, #136]	; (8003040 <xTaskIncrementTick+0x15c>)
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <xTaskIncrementTick+0x160>)
 8002fc8:	441a      	add	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7ff f8b5 	bl	8002140 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <xTaskIncrementTick+0x164>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3b9      	bcc.n	8002f58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe8:	e7b6      	b.n	8002f58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <xTaskIncrementTick+0x164>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	4914      	ldr	r1, [pc, #80]	; (8003044 <xTaskIncrementTick+0x160>)
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d901      	bls.n	8003006 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003002:	2301      	movs	r3, #1
 8003004:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <xTaskIncrementTick+0x168>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800300e:	2301      	movs	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e004      	b.n	800301e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <xTaskIncrementTick+0x16c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3301      	adds	r3, #1
 800301a:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <xTaskIncrementTick+0x16c>)
 800301c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800301e:	697b      	ldr	r3, [r7, #20]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200004c0 	.word	0x200004c0
 800302c:	2000049c 	.word	0x2000049c
 8003030:	20000450 	.word	0x20000450
 8003034:	20000454 	.word	0x20000454
 8003038:	200004b0 	.word	0x200004b0
 800303c:	200004b8 	.word	0x200004b8
 8003040:	200004a0 	.word	0x200004a0
 8003044:	2000039c 	.word	0x2000039c
 8003048:	20000398 	.word	0x20000398
 800304c:	200004ac 	.word	0x200004ac
 8003050:	200004a8 	.word	0x200004a8

08003054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800305a:	4b29      	ldr	r3, [pc, #164]	; (8003100 <vTaskSwitchContext+0xac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <vTaskSwitchContext+0xb0>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003068:	e044      	b.n	80030f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <vTaskSwitchContext+0xb0>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <vTaskSwitchContext+0xb4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	f1c3 031f 	rsb	r3, r3, #31
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	4921      	ldr	r1, [pc, #132]	; (800310c <vTaskSwitchContext+0xb8>)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	607b      	str	r3, [r7, #4]
}
 80030ac:	bf00      	nop
 80030ae:	e7fe      	b.n	80030ae <vTaskSwitchContext+0x5a>
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4a14      	ldr	r2, [pc, #80]	; (800310c <vTaskSwitchContext+0xb8>)
 80030bc:	4413      	add	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	3308      	adds	r3, #8
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d104      	bne.n	80030e0 <vTaskSwitchContext+0x8c>
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <vTaskSwitchContext+0xbc>)
 80030e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <vTaskSwitchContext+0xbc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	334c      	adds	r3, #76	; 0x4c
 80030f0:	4a08      	ldr	r2, [pc, #32]	; (8003114 <vTaskSwitchContext+0xc0>)
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	200004c0 	.word	0x200004c0
 8003104:	200004ac 	.word	0x200004ac
 8003108:	200004a0 	.word	0x200004a0
 800310c:	2000039c 	.word	0x2000039c
 8003110:	20000398 	.word	0x20000398
 8003114:	20000010 	.word	0x20000010

08003118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60fb      	str	r3, [r7, #12]
}
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <vTaskPlaceOnEventList+0x44>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3318      	adds	r3, #24
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff f81e 	bl	8002188 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800314c:	2101      	movs	r1, #1
 800314e:	6838      	ldr	r0, [r7, #0]
 8003150:	f000 fa6a 	bl	8003628 <prvAddCurrentTaskToDelayedList>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000398 	.word	0x20000398

08003160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	60fb      	str	r3, [r7, #12]
}
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	3318      	adds	r3, #24
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f832 	bl	80021fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <xTaskRemoveFromEventList+0xac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11c      	bne.n	80031d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f829 	bl	80021fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	2201      	movs	r2, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <xTaskRemoveFromEventList+0xb0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	4a16      	ldr	r2, [pc, #88]	; (8003210 <xTaskRemoveFromEventList+0xb0>)
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4a13      	ldr	r2, [pc, #76]	; (8003214 <xTaskRemoveFromEventList+0xb4>)
 80031c8:	441a      	add	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f7fe ffb5 	bl	8002140 <vListInsertEnd>
 80031d6:	e005      	b.n	80031e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3318      	adds	r3, #24
 80031dc:	4619      	mov	r1, r3
 80031de:	480e      	ldr	r0, [pc, #56]	; (8003218 <xTaskRemoveFromEventList+0xb8>)
 80031e0:	f7fe ffae 	bl	8002140 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <xTaskRemoveFromEventList+0xbc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d905      	bls.n	80031fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031f2:	2301      	movs	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <xTaskRemoveFromEventList+0xc0>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e001      	b.n	8003202 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003202:	697b      	ldr	r3, [r7, #20]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200004c0 	.word	0x200004c0
 8003210:	200004a0 	.word	0x200004a0
 8003214:	2000039c 	.word	0x2000039c
 8003218:	20000458 	.word	0x20000458
 800321c:	20000398 	.word	0x20000398
 8003220:	200004ac 	.word	0x200004ac

08003224 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <vTaskInternalSetTimeOutState+0x24>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <vTaskInternalSetTimeOutState+0x28>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	605a      	str	r2, [r3, #4]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	200004b0 	.word	0x200004b0
 800324c:	2000049c 	.word	0x2000049c

08003250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	613b      	str	r3, [r7, #16]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	60fb      	str	r3, [r7, #12]
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003292:	f000 fb5f 	bl	8003954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <xTaskCheckForTimeOut+0xbc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ae:	d102      	bne.n	80032b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e023      	b.n	80032fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <xTaskCheckForTimeOut+0xc0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d007      	beq.n	80032d2 <xTaskCheckForTimeOut+0x82>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e015      	b.n	80032fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d20b      	bcs.n	80032f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad2      	subs	r2, r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff9b 	bl	8003224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e004      	b.n	80032fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032fe:	f000 fb59 	bl	80039b4 <vPortExitCritical>

	return xReturn;
 8003302:	69fb      	ldr	r3, [r7, #28]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2000049c 	.word	0x2000049c
 8003310:	200004b0 	.word	0x200004b0

08003314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <vTaskMissedYield+0x14>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	200004ac 	.word	0x200004ac

0800332c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003334:	f000 f852 	bl	80033dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <prvIdleTask+0x28>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d9f9      	bls.n	8003334 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <prvIdleTask+0x2c>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003350:	e7f0      	b.n	8003334 <prvIdleTask+0x8>
 8003352:	bf00      	nop
 8003354:	2000039c 	.word	0x2000039c
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e00c      	b.n	8003382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <prvInitialiseTaskLists+0x60>)
 8003374:	4413      	add	r3, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe feb5 	bl	80020e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d9ef      	bls.n	8003368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003388:	480d      	ldr	r0, [pc, #52]	; (80033c0 <prvInitialiseTaskLists+0x64>)
 800338a:	f7fe feac 	bl	80020e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800338e:	480d      	ldr	r0, [pc, #52]	; (80033c4 <prvInitialiseTaskLists+0x68>)
 8003390:	f7fe fea9 	bl	80020e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003394:	480c      	ldr	r0, [pc, #48]	; (80033c8 <prvInitialiseTaskLists+0x6c>)
 8003396:	f7fe fea6 	bl	80020e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <prvInitialiseTaskLists+0x70>)
 800339c:	f7fe fea3 	bl	80020e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033a0:	480b      	ldr	r0, [pc, #44]	; (80033d0 <prvInitialiseTaskLists+0x74>)
 80033a2:	f7fe fea0 	bl	80020e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <prvInitialiseTaskLists+0x78>)
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <prvInitialiseTaskLists+0x64>)
 80033aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <prvInitialiseTaskLists+0x7c>)
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <prvInitialiseTaskLists+0x68>)
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000039c 	.word	0x2000039c
 80033c0:	20000428 	.word	0x20000428
 80033c4:	2000043c 	.word	0x2000043c
 80033c8:	20000458 	.word	0x20000458
 80033cc:	2000046c 	.word	0x2000046c
 80033d0:	20000484 	.word	0x20000484
 80033d4:	20000450 	.word	0x20000450
 80033d8:	20000454 	.word	0x20000454

080033dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e2:	e019      	b.n	8003418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033e4:	f000 fab6 	bl	8003954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <prvCheckTasksWaitingTermination+0x50>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe ff00 	bl	80021fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <prvCheckTasksWaitingTermination+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3b01      	subs	r3, #1
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <prvCheckTasksWaitingTermination+0x54>)
 8003402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800340c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800340e:	f000 fad1 	bl	80039b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f810 	bl	8003438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e1      	bne.n	80033e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000046c 	.word	0x2000046c
 8003430:	20000498 	.word	0x20000498
 8003434:	20000480 	.word	0x20000480

08003438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	334c      	adds	r3, #76	; 0x4c
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fd9b 	bl	8003f80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc29 	bl	8003cb0 <vPortFree>
				vPortFree( pxTCB );
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fc26 	bl	8003cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003464:	e018      	b.n	8003498 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d103      	bne.n	8003478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fc1d 	bl	8003cb0 <vPortFree>
	}
 8003476:	e00f      	b.n	8003498 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800347e:	2b02      	cmp	r3, #2
 8003480:	d00a      	beq.n	8003498 <prvDeleteTCB+0x60>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	60fb      	str	r3, [r7, #12]
}
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <prvDeleteTCB+0x5e>
	}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <prvResetNextTaskUnblockTime+0x38>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d104      	bne.n	80034ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <prvResetNextTaskUnblockTime+0x3c>)
 80034b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034b8:	e008      	b.n	80034cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <prvResetNextTaskUnblockTime+0x38>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a04      	ldr	r2, [pc, #16]	; (80034dc <prvResetNextTaskUnblockTime+0x3c>)
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	20000450 	.word	0x20000450
 80034dc:	200004b8 	.word	0x200004b8

080034e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <xTaskGetSchedulerState+0x34>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034ee:	2301      	movs	r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	e008      	b.n	8003506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <xTaskGetSchedulerState+0x38>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034fc:	2302      	movs	r3, #2
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	e001      	b.n	8003506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003506:	687b      	ldr	r3, [r7, #4]
	}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	200004a4 	.word	0x200004a4
 8003518:	200004c0 	.word	0x200004c0

0800351c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d06e      	beq.n	8003610 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <xTaskPriorityDisinherit+0x100>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d00a      	beq.n	8003552 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	60fb      	str	r3, [r7, #12]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	60bb      	str	r3, [r7, #8]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	429a      	cmp	r2, r3
 8003584:	d044      	beq.n	8003610 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	2b00      	cmp	r3, #0
 800358c:	d140      	bne.n	8003610 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	3304      	adds	r3, #4
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fe31 	bl	80021fa <uxListRemove>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	491f      	ldr	r1, [pc, #124]	; (8003620 <xTaskPriorityDisinherit+0x104>)
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xTaskPriorityDisinherit+0xae>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2201      	movs	r2, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	4b18      	ldr	r3, [pc, #96]	; (8003624 <xTaskPriorityDisinherit+0x108>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4013      	ands	r3, r2
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <xTaskPriorityDisinherit+0x108>)
 80035c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f1c3 0207 	rsb	r2, r3, #7
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	2201      	movs	r2, #1
 80035e4:	409a      	lsls	r2, r3
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <xTaskPriorityDisinherit+0x108>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <xTaskPriorityDisinherit+0x108>)
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4a08      	ldr	r2, [pc, #32]	; (8003620 <xTaskPriorityDisinherit+0x104>)
 80035fe:	441a      	add	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7fe fd9a 	bl	8002140 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003610:	697b      	ldr	r3, [r7, #20]
	}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000398 	.word	0x20000398
 8003620:	2000039c 	.word	0x2000039c
 8003624:	200004a0 	.word	0x200004a0

08003628 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003632:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3304      	adds	r3, #4
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fddb 	bl	80021fa <uxListRemove>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	2201      	movs	r2, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4013      	ands	r3, r2
 800365e:	4a20      	ldr	r2, [pc, #128]	; (80036e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003660:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003668:	d10a      	bne.n	8003680 <prvAddCurrentTaskToDelayedList+0x58>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	481a      	ldr	r0, [pc, #104]	; (80036e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800367a:	f7fe fd61 	bl	8002140 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800367e:	e026      	b.n	80036ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	429a      	cmp	r2, r3
 8003696:	d209      	bcs.n	80036ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3304      	adds	r3, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f7fe fd6f 	bl	8002188 <vListInsert>
}
 80036aa:	e010      	b.n	80036ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f7fe fd65 	bl	8002188 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d202      	bcs.n	80036ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6013      	str	r3, [r2, #0]
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000049c 	.word	0x2000049c
 80036dc:	20000398 	.word	0x20000398
 80036e0:	200004a0 	.word	0x200004a0
 80036e4:	20000484 	.word	0x20000484
 80036e8:	20000454 	.word	0x20000454
 80036ec:	20000450 	.word	0x20000450
 80036f0:	200004b8 	.word	0x200004b8

080036f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b04      	subs	r3, #4
 8003704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800370c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3b04      	subs	r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b04      	subs	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <pxPortInitialiseStack+0x64>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3b14      	subs	r3, #20
 800372e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3b04      	subs	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f06f 0202 	mvn.w	r2, #2
 8003742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3b20      	subs	r3, #32
 8003748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	0800375d 	.word	0x0800375d

0800375c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <prvTaskExitError+0x54>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376e:	d00a      	beq.n	8003786 <prvTaskExitError+0x2a>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60fb      	str	r3, [r7, #12]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <prvTaskExitError+0x28>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	60bb      	str	r3, [r7, #8]
}
 8003798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800379a:	bf00      	nop
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0fc      	beq.n	800379c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	2000000c 	.word	0x2000000c
	...

080037c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <pxCurrentTCBConst2>)
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6808      	ldr	r0, [r1, #0]
 80037c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ca:	f380 8809 	msr	PSP, r0
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8811 	msr	BASEPRI, r0
 80037da:	4770      	bx	lr
 80037dc:	f3af 8000 	nop.w

080037e0 <pxCurrentTCBConst2>:
 80037e0:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037e8:	4808      	ldr	r0, [pc, #32]	; (800380c <prvPortStartFirstTask+0x24>)
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	6800      	ldr	r0, [r0, #0]
 80037ee:	f380 8808 	msr	MSP, r0
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8814 	msr	CONTROL, r0
 80037fa:	b662      	cpsie	i
 80037fc:	b661      	cpsie	f
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	df00      	svc	0
 8003808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800380a:	bf00      	nop
 800380c:	e000ed08 	.word	0xe000ed08

08003810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003816:	4b46      	ldr	r3, [pc, #280]	; (8003930 <xPortStartScheduler+0x120>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a46      	ldr	r2, [pc, #280]	; (8003934 <xPortStartScheduler+0x124>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10a      	bne.n	8003836 <xPortStartScheduler+0x26>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	613b      	str	r3, [r7, #16]
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003836:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <xPortStartScheduler+0x120>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3f      	ldr	r2, [pc, #252]	; (8003938 <xPortStartScheduler+0x128>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10a      	bne.n	8003856 <xPortStartScheduler+0x46>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003856:	4b39      	ldr	r3, [pc, #228]	; (800393c <xPortStartScheduler+0x12c>)
 8003858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <xPortStartScheduler+0x130>)
 800387c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <xPortStartScheduler+0x134>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003884:	e009      	b.n	800389a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003886:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <xPortStartScheduler+0x134>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3b01      	subs	r3, #1
 800388c:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <xPortStartScheduler+0x134>)
 800388e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d0ef      	beq.n	8003886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038a6:	4b27      	ldr	r3, [pc, #156]	; (8003944 <xPortStartScheduler+0x134>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1c3 0307 	rsb	r3, r3, #7
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00a      	beq.n	80038c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	60bb      	str	r3, [r7, #8]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <xPortStartScheduler+0x134>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <xPortStartScheduler+0x134>)
 80038d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <xPortStartScheduler+0x134>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <xPortStartScheduler+0x134>)
 80038dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038e6:	4b18      	ldr	r3, [pc, #96]	; (8003948 <xPortStartScheduler+0x138>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <xPortStartScheduler+0x138>)
 80038ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <xPortStartScheduler+0x138>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a14      	ldr	r2, [pc, #80]	; (8003948 <xPortStartScheduler+0x138>)
 80038f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038fe:	f000 f8dd 	bl	8003abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <xPortStartScheduler+0x13c>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003908:	f000 f8fc 	bl	8003b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <xPortStartScheduler+0x140>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <xPortStartScheduler+0x140>)
 8003912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003918:	f7ff ff66 	bl	80037e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800391c:	f7ff fb9a 	bl	8003054 <vTaskSwitchContext>
	prvTaskExitError();
 8003920:	f7ff ff1c 	bl	800375c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000ed00 	.word	0xe000ed00
 8003934:	410fc271 	.word	0x410fc271
 8003938:	410fc270 	.word	0x410fc270
 800393c:	e000e400 	.word	0xe000e400
 8003940:	200004c4 	.word	0x200004c4
 8003944:	200004c8 	.word	0x200004c8
 8003948:	e000ed20 	.word	0xe000ed20
 800394c:	2000000c 	.word	0x2000000c
 8003950:	e000ef34 	.word	0xe000ef34

08003954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	607b      	str	r3, [r7, #4]
}
 800396c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <vPortEnterCritical+0x58>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <vPortEnterCritical+0x58>)
 8003976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <vPortEnterCritical+0x58>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10f      	bne.n	80039a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <vPortEnterCritical+0x5c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	603b      	str	r3, [r7, #0]
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <vPortEnterCritical+0x4a>
	}
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	2000000c 	.word	0x2000000c
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <vPortExitCritical+0x50>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <vPortExitCritical+0x24>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	607b      	str	r3, [r7, #4]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <vPortExitCritical+0x50>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3b01      	subs	r3, #1
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <vPortExitCritical+0x50>)
 80039e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <vPortExitCritical+0x50>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <vPortExitCritical+0x42>
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2000000c 	.word	0x2000000c
	...

08003a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a10:	f3ef 8009 	mrs	r0, PSP
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <pxCurrentTCBConst>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f01e 0f10 	tst.w	lr, #16
 8003a20:	bf08      	it	eq
 8003a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2a:	6010      	str	r0, [r2, #0]
 8003a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a34:	f380 8811 	msr	BASEPRI, r0
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f7ff fb08 	bl	8003054 <vTaskSwitchContext>
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f380 8811 	msr	BASEPRI, r0
 8003a4c:	bc09      	pop	{r0, r3}
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	6808      	ldr	r0, [r1, #0]
 8003a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a56:	f01e 0f10 	tst.w	lr, #16
 8003a5a:	bf08      	it	eq
 8003a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a60:	f380 8809 	msr	PSP, r0
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	f3af 8000 	nop.w

08003a70 <pxCurrentTCBConst>:
 8003a70:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	607b      	str	r3, [r7, #4]
}
 8003a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a92:	f7ff fa27 	bl	8002ee4 <xTaskIncrementTick>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <xPortSysTickHandler+0x40>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f383 8811 	msr	BASEPRI, r3
}
 8003aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <vPortSetupTimerInterrupt+0x34>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <vPortSetupTimerInterrupt+0x38>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <vPortSetupTimerInterrupt+0x3c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <vPortSetupTimerInterrupt+0x40>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <vPortSetupTimerInterrupt+0x44>)
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <vPortSetupTimerInterrupt+0x34>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010
 8003af4:	e000e018 	.word	0xe000e018
 8003af8:	20000000 	.word	0x20000000
 8003afc:	10624dd3 	.word	0x10624dd3
 8003b00:	e000e014 	.word	0xe000e014

08003b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b14 <vPortEnableVFP+0x10>
 8003b08:	6801      	ldr	r1, [r0, #0]
 8003b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b0e:	6001      	str	r1, [r0, #0]
 8003b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b12:	bf00      	nop
 8003b14:	e000ed88 	.word	0xe000ed88

08003b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b24:	f7ff f934 	bl	8002d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <pvPortMalloc+0x180>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b30:	f000 f920 	bl	8003d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b34:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <pvPortMalloc+0x184>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f040 8093 	bne.w	8003c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01d      	beq.n	8003b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b48:	2208      	movs	r2, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d014      	beq.n	8003b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f023 0307 	bic.w	r3, r3, #7
 8003b60:	3308      	adds	r3, #8
 8003b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <pvPortMalloc+0x6c>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	617b      	str	r3, [r7, #20]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d06e      	beq.n	8003c68 <pvPortMalloc+0x150>
 8003b8a:	4b45      	ldr	r3, [pc, #276]	; (8003ca0 <pvPortMalloc+0x188>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d869      	bhi.n	8003c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <pvPortMalloc+0x18c>)
 8003b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b98:	4b42      	ldr	r3, [pc, #264]	; (8003ca4 <pvPortMalloc+0x18c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b9e:	e004      	b.n	8003baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d903      	bls.n	8003bbc <pvPortMalloc+0xa4>
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f1      	bne.n	8003ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <pvPortMalloc+0x180>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d050      	beq.n	8003c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2208      	movs	r2, #8
 8003bcc:	4413      	add	r3, r2
 8003bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	2308      	movs	r3, #8
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d91f      	bls.n	8003c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <pvPortMalloc+0xf8>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	613b      	str	r3, [r7, #16]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	1ad2      	subs	r2, r2, r3
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c22:	69b8      	ldr	r0, [r7, #24]
 8003c24:	f000 f908 	bl	8003e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <pvPortMalloc+0x188>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <pvPortMalloc+0x188>)
 8003c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <pvPortMalloc+0x188>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <pvPortMalloc+0x190>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d203      	bcs.n	8003c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <pvPortMalloc+0x188>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <pvPortMalloc+0x190>)
 8003c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <pvPortMalloc+0x184>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <pvPortMalloc+0x194>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <pvPortMalloc+0x194>)
 8003c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c68:	f7ff f8a0 	bl	8002dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <pvPortMalloc+0x174>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60fb      	str	r3, [r7, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <pvPortMalloc+0x172>
	return pvReturn;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3728      	adds	r7, #40	; 0x28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200040d4 	.word	0x200040d4
 8003c9c:	200040e8 	.word	0x200040e8
 8003ca0:	200040d8 	.word	0x200040d8
 8003ca4:	200040cc 	.word	0x200040cc
 8003ca8:	200040dc 	.word	0x200040dc
 8003cac:	200040e0 	.word	0x200040e0

08003cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04d      	beq.n	8003d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4413      	add	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <vPortFree+0xb8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <vPortFree+0x44>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	60fb      	str	r3, [r7, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <vPortFree+0x62>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	60bb      	str	r3, [r7, #8]
}
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <vPortFree+0xb8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01e      	beq.n	8003d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11a      	bne.n	8003d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <vPortFree+0xb8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	401a      	ands	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d38:	f7ff f82a 	bl	8002d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <vPortFree+0xbc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <vPortFree+0xbc>)
 8003d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d4a:	6938      	ldr	r0, [r7, #16]
 8003d4c:	f000 f874 	bl	8003e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <vPortFree+0xc0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	4a06      	ldr	r2, [pc, #24]	; (8003d70 <vPortFree+0xc0>)
 8003d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d5a:	f7ff f827 	bl	8002dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d5e:	bf00      	nop
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200040e8 	.word	0x200040e8
 8003d6c:	200040d8 	.word	0x200040d8
 8003d70:	200040e4 	.word	0x200040e4

08003d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d80:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <prvHeapInit+0xac>)
 8003d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00c      	beq.n	8003da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3307      	adds	r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0307 	bic.w	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	4a1f      	ldr	r2, [pc, #124]	; (8003e20 <prvHeapInit+0xac>)
 8003da4:	4413      	add	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <prvHeapInit+0xb0>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003db2:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <prvHeapInit+0xb0>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0307 	bic.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <prvHeapInit+0xb4>)
 8003dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <prvHeapInit+0xb4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <prvHeapInit+0xb4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	1ad2      	subs	r2, r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <prvHeapInit+0xb4>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <prvHeapInit+0xb8>)
 8003e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <prvHeapInit+0xbc>)
 8003e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <prvHeapInit+0xc0>)
 8003e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e12:	601a      	str	r2, [r3, #0]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	200004cc 	.word	0x200004cc
 8003e24:	200040cc 	.word	0x200040cc
 8003e28:	200040d4 	.word	0x200040d4
 8003e2c:	200040dc 	.word	0x200040dc
 8003e30:	200040d8 	.word	0x200040d8
 8003e34:	200040e8 	.word	0x200040e8

08003e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <prvInsertBlockIntoFreeList+0xac>)
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e002      	b.n	8003e4c <prvInsertBlockIntoFreeList+0x14>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d8f7      	bhi.n	8003e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	4413      	add	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d108      	bne.n	8003e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	441a      	add	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d118      	bne.n	8003ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d00d      	beq.n	8003eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	441a      	add	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e008      	b.n	8003ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e003      	b.n	8003ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d002      	beq.n	8003ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	200040cc 	.word	0x200040cc
 8003ee8:	200040d4 	.word	0x200040d4

08003eec <__libc_init_array>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4d0d      	ldr	r5, [pc, #52]	; (8003f24 <__libc_init_array+0x38>)
 8003ef0:	4c0d      	ldr	r4, [pc, #52]	; (8003f28 <__libc_init_array+0x3c>)
 8003ef2:	1b64      	subs	r4, r4, r5
 8003ef4:	10a4      	asrs	r4, r4, #2
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	42a6      	cmp	r6, r4
 8003efa:	d109      	bne.n	8003f10 <__libc_init_array+0x24>
 8003efc:	4d0b      	ldr	r5, [pc, #44]	; (8003f2c <__libc_init_array+0x40>)
 8003efe:	4c0c      	ldr	r4, [pc, #48]	; (8003f30 <__libc_init_array+0x44>)
 8003f00:	f000 f8f2 	bl	80040e8 <_init>
 8003f04:	1b64      	subs	r4, r4, r5
 8003f06:	10a4      	asrs	r4, r4, #2
 8003f08:	2600      	movs	r6, #0
 8003f0a:	42a6      	cmp	r6, r4
 8003f0c:	d105      	bne.n	8003f1a <__libc_init_array+0x2e>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f14:	4798      	blx	r3
 8003f16:	3601      	adds	r6, #1
 8003f18:	e7ee      	b.n	8003ef8 <__libc_init_array+0xc>
 8003f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1e:	4798      	blx	r3
 8003f20:	3601      	adds	r6, #1
 8003f22:	e7f2      	b.n	8003f0a <__libc_init_array+0x1e>
 8003f24:	080041f0 	.word	0x080041f0
 8003f28:	080041f0 	.word	0x080041f0
 8003f2c:	080041f0 	.word	0x080041f0
 8003f30:	080041f4 	.word	0x080041f4

08003f34 <__retarget_lock_acquire_recursive>:
 8003f34:	4770      	bx	lr

08003f36 <__retarget_lock_release_recursive>:
 8003f36:	4770      	bx	lr

08003f38 <memcpy>:
 8003f38:	440a      	add	r2, r1
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003f40:	d100      	bne.n	8003f44 <memcpy+0xc>
 8003f42:	4770      	bx	lr
 8003f44:	b510      	push	{r4, lr}
 8003f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f4e:	4291      	cmp	r1, r2
 8003f50:	d1f9      	bne.n	8003f46 <memcpy+0xe>
 8003f52:	bd10      	pop	{r4, pc}

08003f54 <memset>:
 8003f54:	4402      	add	r2, r0
 8003f56:	4603      	mov	r3, r0
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <memset+0xa>
 8003f5c:	4770      	bx	lr
 8003f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f62:	e7f9      	b.n	8003f58 <memset+0x4>

08003f64 <cleanup_glue>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	460c      	mov	r4, r1
 8003f68:	6809      	ldr	r1, [r1, #0]
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	b109      	cbz	r1, 8003f72 <cleanup_glue+0xe>
 8003f6e:	f7ff fff9 	bl	8003f64 <cleanup_glue>
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7a:	f000 b869 	b.w	8004050 <_free_r>
	...

08003f80 <_reclaim_reent>:
 8003f80:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <_reclaim_reent+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4283      	cmp	r3, r0
 8003f86:	b570      	push	{r4, r5, r6, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	d051      	beq.n	8004030 <_reclaim_reent+0xb0>
 8003f8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f8e:	b143      	cbz	r3, 8003fa2 <_reclaim_reent+0x22>
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d14a      	bne.n	800402c <_reclaim_reent+0xac>
 8003f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	b111      	cbz	r1, 8003fa2 <_reclaim_reent+0x22>
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f000 f857 	bl	8004050 <_free_r>
 8003fa2:	6961      	ldr	r1, [r4, #20]
 8003fa4:	b111      	cbz	r1, 8003fac <_reclaim_reent+0x2c>
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f000 f852 	bl	8004050 <_free_r>
 8003fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fae:	b111      	cbz	r1, 8003fb6 <_reclaim_reent+0x36>
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 f84d 	bl	8004050 <_free_r>
 8003fb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003fb8:	b111      	cbz	r1, 8003fc0 <_reclaim_reent+0x40>
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 f848 	bl	8004050 <_free_r>
 8003fc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003fc2:	b111      	cbz	r1, 8003fca <_reclaim_reent+0x4a>
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 f843 	bl	8004050 <_free_r>
 8003fca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003fcc:	b111      	cbz	r1, 8003fd4 <_reclaim_reent+0x54>
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 f83e 	bl	8004050 <_free_r>
 8003fd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003fd6:	b111      	cbz	r1, 8003fde <_reclaim_reent+0x5e>
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f000 f839 	bl	8004050 <_free_r>
 8003fde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003fe0:	b111      	cbz	r1, 8003fe8 <_reclaim_reent+0x68>
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f000 f834 	bl	8004050 <_free_r>
 8003fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fea:	b111      	cbz	r1, 8003ff2 <_reclaim_reent+0x72>
 8003fec:	4620      	mov	r0, r4
 8003fee:	f000 f82f 	bl	8004050 <_free_r>
 8003ff2:	69a3      	ldr	r3, [r4, #24]
 8003ff4:	b1e3      	cbz	r3, 8004030 <_reclaim_reent+0xb0>
 8003ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4798      	blx	r3
 8003ffc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003ffe:	b1b9      	cbz	r1, 8004030 <_reclaim_reent+0xb0>
 8004000:	4620      	mov	r0, r4
 8004002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004006:	f7ff bfad 	b.w	8003f64 <cleanup_glue>
 800400a:	5949      	ldr	r1, [r1, r5]
 800400c:	b941      	cbnz	r1, 8004020 <_reclaim_reent+0xa0>
 800400e:	3504      	adds	r5, #4
 8004010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004012:	2d80      	cmp	r5, #128	; 0x80
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	d1f8      	bne.n	800400a <_reclaim_reent+0x8a>
 8004018:	4620      	mov	r0, r4
 800401a:	f000 f819 	bl	8004050 <_free_r>
 800401e:	e7ba      	b.n	8003f96 <_reclaim_reent+0x16>
 8004020:	680e      	ldr	r6, [r1, #0]
 8004022:	4620      	mov	r0, r4
 8004024:	f000 f814 	bl	8004050 <_free_r>
 8004028:	4631      	mov	r1, r6
 800402a:	e7ef      	b.n	800400c <_reclaim_reent+0x8c>
 800402c:	2500      	movs	r5, #0
 800402e:	e7ef      	b.n	8004010 <_reclaim_reent+0x90>
 8004030:	bd70      	pop	{r4, r5, r6, pc}
 8004032:	bf00      	nop
 8004034:	20000010 	.word	0x20000010

08004038 <__malloc_lock>:
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <__malloc_lock+0x8>)
 800403a:	f7ff bf7b 	b.w	8003f34 <__retarget_lock_acquire_recursive>
 800403e:	bf00      	nop
 8004040:	200040ec 	.word	0x200040ec

08004044 <__malloc_unlock>:
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <__malloc_unlock+0x8>)
 8004046:	f7ff bf76 	b.w	8003f36 <__retarget_lock_release_recursive>
 800404a:	bf00      	nop
 800404c:	200040ec 	.word	0x200040ec

08004050 <_free_r>:
 8004050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004052:	2900      	cmp	r1, #0
 8004054:	d044      	beq.n	80040e0 <_free_r+0x90>
 8004056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800405a:	9001      	str	r0, [sp, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f1a1 0404 	sub.w	r4, r1, #4
 8004062:	bfb8      	it	lt
 8004064:	18e4      	addlt	r4, r4, r3
 8004066:	f7ff ffe7 	bl	8004038 <__malloc_lock>
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <_free_r+0x94>)
 800406c:	9801      	ldr	r0, [sp, #4]
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	b933      	cbnz	r3, 8004080 <_free_r+0x30>
 8004072:	6063      	str	r3, [r4, #4]
 8004074:	6014      	str	r4, [r2, #0]
 8004076:	b003      	add	sp, #12
 8004078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800407c:	f7ff bfe2 	b.w	8004044 <__malloc_unlock>
 8004080:	42a3      	cmp	r3, r4
 8004082:	d908      	bls.n	8004096 <_free_r+0x46>
 8004084:	6825      	ldr	r5, [r4, #0]
 8004086:	1961      	adds	r1, r4, r5
 8004088:	428b      	cmp	r3, r1
 800408a:	bf01      	itttt	eq
 800408c:	6819      	ldreq	r1, [r3, #0]
 800408e:	685b      	ldreq	r3, [r3, #4]
 8004090:	1949      	addeq	r1, r1, r5
 8004092:	6021      	streq	r1, [r4, #0]
 8004094:	e7ed      	b.n	8004072 <_free_r+0x22>
 8004096:	461a      	mov	r2, r3
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	b10b      	cbz	r3, 80040a0 <_free_r+0x50>
 800409c:	42a3      	cmp	r3, r4
 800409e:	d9fa      	bls.n	8004096 <_free_r+0x46>
 80040a0:	6811      	ldr	r1, [r2, #0]
 80040a2:	1855      	adds	r5, r2, r1
 80040a4:	42a5      	cmp	r5, r4
 80040a6:	d10b      	bne.n	80040c0 <_free_r+0x70>
 80040a8:	6824      	ldr	r4, [r4, #0]
 80040aa:	4421      	add	r1, r4
 80040ac:	1854      	adds	r4, r2, r1
 80040ae:	42a3      	cmp	r3, r4
 80040b0:	6011      	str	r1, [r2, #0]
 80040b2:	d1e0      	bne.n	8004076 <_free_r+0x26>
 80040b4:	681c      	ldr	r4, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	6053      	str	r3, [r2, #4]
 80040ba:	4421      	add	r1, r4
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	e7da      	b.n	8004076 <_free_r+0x26>
 80040c0:	d902      	bls.n	80040c8 <_free_r+0x78>
 80040c2:	230c      	movs	r3, #12
 80040c4:	6003      	str	r3, [r0, #0]
 80040c6:	e7d6      	b.n	8004076 <_free_r+0x26>
 80040c8:	6825      	ldr	r5, [r4, #0]
 80040ca:	1961      	adds	r1, r4, r5
 80040cc:	428b      	cmp	r3, r1
 80040ce:	bf04      	itt	eq
 80040d0:	6819      	ldreq	r1, [r3, #0]
 80040d2:	685b      	ldreq	r3, [r3, #4]
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	bf04      	itt	eq
 80040d8:	1949      	addeq	r1, r1, r5
 80040da:	6021      	streq	r1, [r4, #0]
 80040dc:	6054      	str	r4, [r2, #4]
 80040de:	e7ca      	b.n	8004076 <_free_r+0x26>
 80040e0:	b003      	add	sp, #12
 80040e2:	bd30      	pop	{r4, r5, pc}
 80040e4:	200040f0 	.word	0x200040f0

080040e8 <_init>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr

080040f4 <_fini>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr
